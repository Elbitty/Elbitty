(y2.py)= 스트리밍이 포함된 메인 구현체. 
  ○		Listener() 클래스의 on_status(,) 메서드로부터 UserStream 확인 후, 
  ┃		확인될 시 (response.py)의 Run(,,)의 인수로 넘겨주고, 이로부터 MRecentTweet와 Tweet의 ID를 받아온다. 
  ┃		받아온 MRecentTweet 객체는 (analysis.py)의 Calculate()의 인수로 넘겨주고, 이로부터 최종 결과값인 StringResponse를 받아온다. 
  ┃		그 후, update_status()에 받아온 StringResponse 객체와, Tweet의 ID를 인수로 넘겨줘, 최종적으로 Tweet을 업로드 한다. 
  ┃
  ┃
  ┣→(response.py)= Run(A,B,C) 메서드 포함. :
  ┃	  ○		파라미터 B 유저로부터 파라미터 C 유저(여기서는 AI BOT을 의미함. )에게 온 최상위 Tweet 1개를 A API를 이용하여 분석한다. 
  ┃	  ┃		Tweet의 ID와 Content를 분석한다. 
  ┃	  ┃		분석된 Content는 (NLP.py)의 Calculate() 인수로 넘겨주고, 이로부터 Tags를 받아온다. 
  ┃	  ┃			여기서 받아온 List 형의 Tags 객체와, String 형 Tweet의 ID 객체를 Return 한다. 
  ┃	  ┃
  ┃	  ┃			
  ┃	  ┗→(NLP.py)= Calculate(A) 메서드 포함. :
  ┃			평문으로 구성된 String 형 객체인 파라미터 A를 NLP 한다. 
  ┃			NLP 된 결과물인 List 형 객체(Tags)를 Return 한다. 
  ┃
  ┃
  ┗→(analysis.py)= AI 구현체로, Calculate(A) 메서드 포함. :
	○		A 파라미터로 Tags를 받아 메서드에 내장된 process로 1차 어휘 분석한다. 
	┃		1차로 분석된 각 어휘에 따라 각각의 명령 분기를 실행한다. 
	┃
	┃			
  	┣→(weather.py)= 날씨 정보 구현체로, Calculate(A) , parseAsDict(A) , DicInStr(,) 메서드 포함. :
	┃    ○  ○		Calculate(A) 메서드: 받아 온 A 파라미터를 (locNLP.py)의 Calculate() 메서드로 어휘 분석. 
	┃    ┃  ┃					분석된 값을 통해 해당 지역의 날씨 정보를 가져오며, 
	┃    ┃  ┃					최종적인 문장 값인 String 형 객체를 Return한다. 
	┃    ┃  ┃		parseAsADict(A) 메서드: (weather.py) 내에서만 쓰이는 local 메서드이다. 
	┃    ┃  ┃					String 형 객체인 A를 받아 Dictionary형 객체로 가공해 Return 한다. 
	┃    ┃  ┃		DicInStr(A,B) 메서드:  (weather.py) 내에서만 쓰이는 local 메서드이다. 
	┃    ┃  ┃					String 형의 B 객체 내에서 Dictionary의 Element인 A 객체를 찾아 반환한다. 
	┃    ┃  ┃
	┃    ┃  ┃
	┃    ┃  ┗→(weather.Status.txt)= 각각의 영문 날씨 별 한국어 정보가 기재되어 있는 DB임. 
	┃    ┃					parseAsDict() 메서드에 의해 Dictionary 형의 객체로 분해된다. 
	┃    ┃
	┃    ┃
	┃    ┃    ┏→(location.py)= Google GeoCode OpenAPI 기반 GeoCode 추출 구현체로, Calculate(A) 메서드 포함. :
	┃    ┃    ┃			String 형 객체 파라미터 A를 API Request 한다. 
	┃    ┃    ┃			성공 시, GeoCode의 Full 주소인 String 형의 Address 객체, 
	┃    ┃    ┃				위도인 Float 형의 latitude 객체, 
	┃    ┃    ┃				경도인 Float 형의 longtitude 객체가 Return 된다. 
	┃    ┃    ┃			실패 시, Boolean 형의 False 객체가 Return 된다. 
	┃    ┃    ┃
	┃    ┃    ○
	┃    ┗→(locNLP.py)= Location 중심의 NLP 구현체로, Calculate() 메서드 포함. :
	┃	   ↑    ○	(NLP.py)에 의해 1차로 분해된 어휘에서 지역 관련 어휘를 구분하여 하나의 String 객체로 결합한다. 
	┃	   ┃    ┃ 		(이 때, 각각의 지역 관련 어휘는 스페이스 문자(" ")로 구분하여 결합함. )
	┃	   ┃    ┃ 	결합된 String은 (location.py)의 Calculate() 메서드의 인수로 전달하고, Return 값(FinalLoc)을 가져온다. 
	┃	   ┃    ┃ 	Return 받은 FinalLoc 객체를 Return한다. 
	┃	   ┃    ┃
	┃	   ┃    ↓
	┃	   ┃  (stringtext.py)= String형 객체를 다루는 메서드인 right(A,(Optional)B) , left(A,B) 포함. :	
	┃	   ┃	    ↑		right 메서드: B 인수가 주어졌다면 String형 객체인 A를 오른쪽으로부터 정수 B개 만큼 가져온 값을 Return 한다. 
	┃	   ┃	    ┃			(B 인수가 주어지지 않았다면 B는 1개로 overload. )
	┃	   ┃	    ┃		left 메서드: String형 객체인 A를 왼쪽으로부터 정수 B개 만큼 가져온 값을 Return 한다. 
	┃	   ┃	    ┃
	┃	   ○	    ○
	┗━━━→(misemise.py)= 미세먼지 정보 구현체로, Calculate(), CalculateInModule() 메서드 포함. :

